//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputAction/NewInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInput"",
    ""maps"": [
        {
            ""name"": ""OnMove"",
            ""id"": ""d16730bd-0746-4758-938c-64a478cb87a9"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""30b22a76-75d0-477e-984a-0faa7db1aa79"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""36089e5f-9c70-4c26-b778-27bedde81249"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""29f0ba1b-ce4a-4202-b550-fa2975d2c71a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa67b948-90d2-4c07-8db1-55903af51255"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02c1c577-cffc-4d3c-9b8c-8e2d51210e78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b602dbcc-48fd-400c-b94b-d72c53926831"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""OnSprint"",
            ""id"": ""001d3432-2816-4fd8-9e51-5f0181c2deff"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""c974f057-af7b-4687-88fe-2338e09a2bd1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f8293af-7113-4de6-a310-ace8529c6e69"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnDebug"",
            ""id"": ""c2ef0854-d720-4dee-a600-67e74a3c989e"",
            ""actions"": [
                {
                    ""name"": ""F3"",
                    ""type"": ""Button"",
                    ""id"": ""4871c4f9-bfa0-49dc-8362-7b5c7d2ec357"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""85078a32-8f10-4555-a7d2-7c28a8420e54"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""F3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnInteraction"",
            ""id"": ""e25d8458-efee-462e-b1c1-6662149287ed"",
            ""actions"": [
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""ba59ffbd-2188-43d8-a85a-3f2aa9f9fef5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f290e71-34c0-44e3-8af8-12d27f0720c9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnAttack"",
            ""id"": ""306495e6-9cad-4130-a192-ec0db59b7a09"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c9e4817d-036f-4d21-bc17-093926a076d4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8bec943-2985-476e-b8cf-7e7ab8b4bfa5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnInventory"",
            ""id"": ""60223830-9dc2-4ef1-95d5-14db69ad3863"",
            ""actions"": [
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""2d268c5c-9089-4138-80ea-20e0021e3cd0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e02c4fbd-a770-4e27-9eb5-acbabfa0fa9e"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnUseItem"",
            ""id"": ""82330d6e-0eb5-4560-8a33-ce9e0eb14601"",
            ""actions"": [
                {
                    ""name"": ""Item1"",
                    ""type"": ""Button"",
                    ""id"": ""76a47a35-c1ac-478b-bc74-e934726e0fb6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item2"",
                    ""type"": ""Button"",
                    ""id"": ""7016b6fa-8955-4dc0-a87d-0bfa2bdc5068"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item3"",
                    ""type"": ""Button"",
                    ""id"": ""6086efd1-fd19-444c-a9fc-b505d3f75b75"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item4"",
                    ""type"": ""Button"",
                    ""id"": ""289647ac-6b11-46fc-bcaf-1c5794b4b296"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item5"",
                    ""type"": ""Button"",
                    ""id"": ""a5d38b98-3e50-448d-84b7-ac363d238ba8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item6"",
                    ""type"": ""Button"",
                    ""id"": ""d292a056-68c6-40e8-96b2-67d3375fb851"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item7"",
                    ""type"": ""Button"",
                    ""id"": ""f1908292-1b07-4778-b424-07e9dc0c39c6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item8"",
                    ""type"": ""Button"",
                    ""id"": ""90b01e8b-ed55-4fc9-b536-5e6450d131b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item9"",
                    ""type"": ""Button"",
                    ""id"": ""82053152-e21d-4845-be1b-630f457afa2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item10"",
                    ""type"": ""Button"",
                    ""id"": ""b758b6ad-d157-4431-bfcd-90b4d3eac9e4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""28275003-612e-412f-854a-a76f8aa1d1a7"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c08a490-00e5-4069-872d-cba116c53718"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b446d7ef-c232-4b4f-be61-5d465ea07991"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fad6a5a-cb99-4008-92cd-fd58aa23beac"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""942b2ade-624b-4ae4-bbca-8c179099a559"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5a5cacd-389a-4dfa-9077-9e03b2186f12"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec797f3f-4069-446f-96ad-6ac7829f845c"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c86df0f5-00c8-46f9-a2e0-42dd10327675"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29f01ea1-eba3-4aeb-a515-abcd5438a3eb"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77d0a7d7-760f-4607-942f-be3e1b9bf161"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Item10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnViewAround"",
            ""id"": ""c1dbcc8c-932d-4019-a333-41c4f994ce9d"",
            ""actions"": [
                {
                    ""name"": ""Viewaround"",
                    ""type"": ""Button"",
                    ""id"": ""a242bef1-ec01-4300-9355-f3bf4d25cb62"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ba460b8-bc3a-4e5c-bda8-6e72a646a7b9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard;touch"",
                    ""action"": ""Viewaround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnZoomInOut"",
            ""id"": ""d7b8338e-69c4-4f1b-a233-e048e19eb1ce"",
            ""actions"": [
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Value"",
                    ""id"": ""a2a63185-b8ba-49d9-9e99-eca5fa145a06"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Value"",
                    ""id"": ""3ae554dd-55aa-40d9-9714-98bc2d3f5f96"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8c1c947-a63c-4cd5-acc1-c2e2e372795d"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3eaed76-27a5-495a-968b-ba4c473753be"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""touch"",
            ""bindingGroup"": ""touch"",
            ""devices"": []
        }
    ]
}");
        // OnMove
        m_OnMove = asset.FindActionMap("OnMove", throwIfNotFound: true);
        m_OnMove_WASD = m_OnMove.FindAction("WASD", throwIfNotFound: true);
        // OnSprint
        m_OnSprint = asset.FindActionMap("OnSprint", throwIfNotFound: true);
        m_OnSprint_Run = m_OnSprint.FindAction("Run", throwIfNotFound: true);
        // OnDebug
        m_OnDebug = asset.FindActionMap("OnDebug", throwIfNotFound: true);
        m_OnDebug_F3 = m_OnDebug.FindAction("F3", throwIfNotFound: true);
        // OnInteraction
        m_OnInteraction = asset.FindActionMap("OnInteraction", throwIfNotFound: true);
        m_OnInteraction_Interaction = m_OnInteraction.FindAction("Interaction", throwIfNotFound: true);
        // OnAttack
        m_OnAttack = asset.FindActionMap("OnAttack", throwIfNotFound: true);
        m_OnAttack_Attack = m_OnAttack.FindAction("Attack", throwIfNotFound: true);
        // OnInventory
        m_OnInventory = asset.FindActionMap("OnInventory", throwIfNotFound: true);
        m_OnInventory_OpenInventory = m_OnInventory.FindAction("OpenInventory", throwIfNotFound: true);
        // OnUseItem
        m_OnUseItem = asset.FindActionMap("OnUseItem", throwIfNotFound: true);
        m_OnUseItem_Item1 = m_OnUseItem.FindAction("Item1", throwIfNotFound: true);
        m_OnUseItem_Item2 = m_OnUseItem.FindAction("Item2", throwIfNotFound: true);
        m_OnUseItem_Item3 = m_OnUseItem.FindAction("Item3", throwIfNotFound: true);
        m_OnUseItem_Item4 = m_OnUseItem.FindAction("Item4", throwIfNotFound: true);
        m_OnUseItem_Item5 = m_OnUseItem.FindAction("Item5", throwIfNotFound: true);
        m_OnUseItem_Item6 = m_OnUseItem.FindAction("Item6", throwIfNotFound: true);
        m_OnUseItem_Item7 = m_OnUseItem.FindAction("Item7", throwIfNotFound: true);
        m_OnUseItem_Item8 = m_OnUseItem.FindAction("Item8", throwIfNotFound: true);
        m_OnUseItem_Item9 = m_OnUseItem.FindAction("Item9", throwIfNotFound: true);
        m_OnUseItem_Item10 = m_OnUseItem.FindAction("Item10", throwIfNotFound: true);
        // OnViewAround
        m_OnViewAround = asset.FindActionMap("OnViewAround", throwIfNotFound: true);
        m_OnViewAround_Viewaround = m_OnViewAround.FindAction("Viewaround", throwIfNotFound: true);
        // OnZoomInOut
        m_OnZoomInOut = asset.FindActionMap("OnZoomInOut", throwIfNotFound: true);
        m_OnZoomInOut_ZoomIn = m_OnZoomInOut.FindAction("ZoomIn", throwIfNotFound: true);
        m_OnZoomInOut_ZoomOut = m_OnZoomInOut.FindAction("ZoomOut", throwIfNotFound: true);
    }

    ~@NewInput()
    {
        UnityEngine.Debug.Assert(!m_OnMove.enabled, "This will cause a leak and performance issues, NewInput.OnMove.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnSprint.enabled, "This will cause a leak and performance issues, NewInput.OnSprint.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnDebug.enabled, "This will cause a leak and performance issues, NewInput.OnDebug.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnInteraction.enabled, "This will cause a leak and performance issues, NewInput.OnInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnAttack.enabled, "This will cause a leak and performance issues, NewInput.OnAttack.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnInventory.enabled, "This will cause a leak and performance issues, NewInput.OnInventory.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnUseItem.enabled, "This will cause a leak and performance issues, NewInput.OnUseItem.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnViewAround.enabled, "This will cause a leak and performance issues, NewInput.OnViewAround.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnZoomInOut.enabled, "This will cause a leak and performance issues, NewInput.OnZoomInOut.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnMove
    private readonly InputActionMap m_OnMove;
    private List<IOnMoveActions> m_OnMoveActionsCallbackInterfaces = new List<IOnMoveActions>();
    private readonly InputAction m_OnMove_WASD;
    public struct OnMoveActions
    {
        private @NewInput m_Wrapper;
        public OnMoveActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_OnMove_WASD;
        public InputActionMap Get() { return m_Wrapper.m_OnMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnMoveActions set) { return set.Get(); }
        public void AddCallbacks(IOnMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_OnMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnMoveActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
        }

        private void UnregisterCallbacks(IOnMoveActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
        }

        public void RemoveCallbacks(IOnMoveActions instance)
        {
            if (m_Wrapper.m_OnMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_OnMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnMoveActions @OnMove => new OnMoveActions(this);

    // OnSprint
    private readonly InputActionMap m_OnSprint;
    private List<IOnSprintActions> m_OnSprintActionsCallbackInterfaces = new List<IOnSprintActions>();
    private readonly InputAction m_OnSprint_Run;
    public struct OnSprintActions
    {
        private @NewInput m_Wrapper;
        public OnSprintActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Run => m_Wrapper.m_OnSprint_Run;
        public InputActionMap Get() { return m_Wrapper.m_OnSprint; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnSprintActions set) { return set.Get(); }
        public void AddCallbacks(IOnSprintActions instance)
        {
            if (instance == null || m_Wrapper.m_OnSprintActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnSprintActionsCallbackInterfaces.Add(instance);
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IOnSprintActions instance)
        {
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IOnSprintActions instance)
        {
            if (m_Wrapper.m_OnSprintActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnSprintActions instance)
        {
            foreach (var item in m_Wrapper.m_OnSprintActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnSprintActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnSprintActions @OnSprint => new OnSprintActions(this);

    // OnDebug
    private readonly InputActionMap m_OnDebug;
    private List<IOnDebugActions> m_OnDebugActionsCallbackInterfaces = new List<IOnDebugActions>();
    private readonly InputAction m_OnDebug_F3;
    public struct OnDebugActions
    {
        private @NewInput m_Wrapper;
        public OnDebugActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @F3 => m_Wrapper.m_OnDebug_F3;
        public InputActionMap Get() { return m_Wrapper.m_OnDebug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnDebugActions set) { return set.Get(); }
        public void AddCallbacks(IOnDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_OnDebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnDebugActionsCallbackInterfaces.Add(instance);
            @F3.started += instance.OnF3;
            @F3.performed += instance.OnF3;
            @F3.canceled += instance.OnF3;
        }

        private void UnregisterCallbacks(IOnDebugActions instance)
        {
            @F3.started -= instance.OnF3;
            @F3.performed -= instance.OnF3;
            @F3.canceled -= instance.OnF3;
        }

        public void RemoveCallbacks(IOnDebugActions instance)
        {
            if (m_Wrapper.m_OnDebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_OnDebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnDebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnDebugActions @OnDebug => new OnDebugActions(this);

    // OnInteraction
    private readonly InputActionMap m_OnInteraction;
    private List<IOnInteractionActions> m_OnInteractionActionsCallbackInterfaces = new List<IOnInteractionActions>();
    private readonly InputAction m_OnInteraction_Interaction;
    public struct OnInteractionActions
    {
        private @NewInput m_Wrapper;
        public OnInteractionActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interaction => m_Wrapper.m_OnInteraction_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_OnInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IOnInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_OnInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnInteractionActionsCallbackInterfaces.Add(instance);
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(IOnInteractionActions instance)
        {
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(IOnInteractionActions instance)
        {
            if (m_Wrapper.m_OnInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_OnInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnInteractionActions @OnInteraction => new OnInteractionActions(this);

    // OnAttack
    private readonly InputActionMap m_OnAttack;
    private List<IOnAttackActions> m_OnAttackActionsCallbackInterfaces = new List<IOnAttackActions>();
    private readonly InputAction m_OnAttack_Attack;
    public struct OnAttackActions
    {
        private @NewInput m_Wrapper;
        public OnAttackActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_OnAttack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_OnAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnAttackActions set) { return set.Get(); }
        public void AddCallbacks(IOnAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_OnAttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnAttackActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IOnAttackActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IOnAttackActions instance)
        {
            if (m_Wrapper.m_OnAttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_OnAttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnAttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnAttackActions @OnAttack => new OnAttackActions(this);

    // OnInventory
    private readonly InputActionMap m_OnInventory;
    private List<IOnInventoryActions> m_OnInventoryActionsCallbackInterfaces = new List<IOnInventoryActions>();
    private readonly InputAction m_OnInventory_OpenInventory;
    public struct OnInventoryActions
    {
        private @NewInput m_Wrapper;
        public OnInventoryActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenInventory => m_Wrapper.m_OnInventory_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_OnInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnInventoryActions set) { return set.Get(); }
        public void AddCallbacks(IOnInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_OnInventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnInventoryActionsCallbackInterfaces.Add(instance);
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
        }

        private void UnregisterCallbacks(IOnInventoryActions instance)
        {
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
        }

        public void RemoveCallbacks(IOnInventoryActions instance)
        {
            if (m_Wrapper.m_OnInventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_OnInventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnInventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnInventoryActions @OnInventory => new OnInventoryActions(this);

    // OnUseItem
    private readonly InputActionMap m_OnUseItem;
    private List<IOnUseItemActions> m_OnUseItemActionsCallbackInterfaces = new List<IOnUseItemActions>();
    private readonly InputAction m_OnUseItem_Item1;
    private readonly InputAction m_OnUseItem_Item2;
    private readonly InputAction m_OnUseItem_Item3;
    private readonly InputAction m_OnUseItem_Item4;
    private readonly InputAction m_OnUseItem_Item5;
    private readonly InputAction m_OnUseItem_Item6;
    private readonly InputAction m_OnUseItem_Item7;
    private readonly InputAction m_OnUseItem_Item8;
    private readonly InputAction m_OnUseItem_Item9;
    private readonly InputAction m_OnUseItem_Item10;
    public struct OnUseItemActions
    {
        private @NewInput m_Wrapper;
        public OnUseItemActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Item1 => m_Wrapper.m_OnUseItem_Item1;
        public InputAction @Item2 => m_Wrapper.m_OnUseItem_Item2;
        public InputAction @Item3 => m_Wrapper.m_OnUseItem_Item3;
        public InputAction @Item4 => m_Wrapper.m_OnUseItem_Item4;
        public InputAction @Item5 => m_Wrapper.m_OnUseItem_Item5;
        public InputAction @Item6 => m_Wrapper.m_OnUseItem_Item6;
        public InputAction @Item7 => m_Wrapper.m_OnUseItem_Item7;
        public InputAction @Item8 => m_Wrapper.m_OnUseItem_Item8;
        public InputAction @Item9 => m_Wrapper.m_OnUseItem_Item9;
        public InputAction @Item10 => m_Wrapper.m_OnUseItem_Item10;
        public InputActionMap Get() { return m_Wrapper.m_OnUseItem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnUseItemActions set) { return set.Get(); }
        public void AddCallbacks(IOnUseItemActions instance)
        {
            if (instance == null || m_Wrapper.m_OnUseItemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnUseItemActionsCallbackInterfaces.Add(instance);
            @Item1.started += instance.OnItem1;
            @Item1.performed += instance.OnItem1;
            @Item1.canceled += instance.OnItem1;
            @Item2.started += instance.OnItem2;
            @Item2.performed += instance.OnItem2;
            @Item2.canceled += instance.OnItem2;
            @Item3.started += instance.OnItem3;
            @Item3.performed += instance.OnItem3;
            @Item3.canceled += instance.OnItem3;
            @Item4.started += instance.OnItem4;
            @Item4.performed += instance.OnItem4;
            @Item4.canceled += instance.OnItem4;
            @Item5.started += instance.OnItem5;
            @Item5.performed += instance.OnItem5;
            @Item5.canceled += instance.OnItem5;
            @Item6.started += instance.OnItem6;
            @Item6.performed += instance.OnItem6;
            @Item6.canceled += instance.OnItem6;
            @Item7.started += instance.OnItem7;
            @Item7.performed += instance.OnItem7;
            @Item7.canceled += instance.OnItem7;
            @Item8.started += instance.OnItem8;
            @Item8.performed += instance.OnItem8;
            @Item8.canceled += instance.OnItem8;
            @Item9.started += instance.OnItem9;
            @Item9.performed += instance.OnItem9;
            @Item9.canceled += instance.OnItem9;
            @Item10.started += instance.OnItem10;
            @Item10.performed += instance.OnItem10;
            @Item10.canceled += instance.OnItem10;
        }

        private void UnregisterCallbacks(IOnUseItemActions instance)
        {
            @Item1.started -= instance.OnItem1;
            @Item1.performed -= instance.OnItem1;
            @Item1.canceled -= instance.OnItem1;
            @Item2.started -= instance.OnItem2;
            @Item2.performed -= instance.OnItem2;
            @Item2.canceled -= instance.OnItem2;
            @Item3.started -= instance.OnItem3;
            @Item3.performed -= instance.OnItem3;
            @Item3.canceled -= instance.OnItem3;
            @Item4.started -= instance.OnItem4;
            @Item4.performed -= instance.OnItem4;
            @Item4.canceled -= instance.OnItem4;
            @Item5.started -= instance.OnItem5;
            @Item5.performed -= instance.OnItem5;
            @Item5.canceled -= instance.OnItem5;
            @Item6.started -= instance.OnItem6;
            @Item6.performed -= instance.OnItem6;
            @Item6.canceled -= instance.OnItem6;
            @Item7.started -= instance.OnItem7;
            @Item7.performed -= instance.OnItem7;
            @Item7.canceled -= instance.OnItem7;
            @Item8.started -= instance.OnItem8;
            @Item8.performed -= instance.OnItem8;
            @Item8.canceled -= instance.OnItem8;
            @Item9.started -= instance.OnItem9;
            @Item9.performed -= instance.OnItem9;
            @Item9.canceled -= instance.OnItem9;
            @Item10.started -= instance.OnItem10;
            @Item10.performed -= instance.OnItem10;
            @Item10.canceled -= instance.OnItem10;
        }

        public void RemoveCallbacks(IOnUseItemActions instance)
        {
            if (m_Wrapper.m_OnUseItemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnUseItemActions instance)
        {
            foreach (var item in m_Wrapper.m_OnUseItemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnUseItemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnUseItemActions @OnUseItem => new OnUseItemActions(this);

    // OnViewAround
    private readonly InputActionMap m_OnViewAround;
    private List<IOnViewAroundActions> m_OnViewAroundActionsCallbackInterfaces = new List<IOnViewAroundActions>();
    private readonly InputAction m_OnViewAround_Viewaround;
    public struct OnViewAroundActions
    {
        private @NewInput m_Wrapper;
        public OnViewAroundActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Viewaround => m_Wrapper.m_OnViewAround_Viewaround;
        public InputActionMap Get() { return m_Wrapper.m_OnViewAround; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnViewAroundActions set) { return set.Get(); }
        public void AddCallbacks(IOnViewAroundActions instance)
        {
            if (instance == null || m_Wrapper.m_OnViewAroundActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnViewAroundActionsCallbackInterfaces.Add(instance);
            @Viewaround.started += instance.OnViewaround;
            @Viewaround.performed += instance.OnViewaround;
            @Viewaround.canceled += instance.OnViewaround;
        }

        private void UnregisterCallbacks(IOnViewAroundActions instance)
        {
            @Viewaround.started -= instance.OnViewaround;
            @Viewaround.performed -= instance.OnViewaround;
            @Viewaround.canceled -= instance.OnViewaround;
        }

        public void RemoveCallbacks(IOnViewAroundActions instance)
        {
            if (m_Wrapper.m_OnViewAroundActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnViewAroundActions instance)
        {
            foreach (var item in m_Wrapper.m_OnViewAroundActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnViewAroundActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnViewAroundActions @OnViewAround => new OnViewAroundActions(this);

    // OnZoomInOut
    private readonly InputActionMap m_OnZoomInOut;
    private List<IOnZoomInOutActions> m_OnZoomInOutActionsCallbackInterfaces = new List<IOnZoomInOutActions>();
    private readonly InputAction m_OnZoomInOut_ZoomIn;
    private readonly InputAction m_OnZoomInOut_ZoomOut;
    public struct OnZoomInOutActions
    {
        private @NewInput m_Wrapper;
        public OnZoomInOutActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomIn => m_Wrapper.m_OnZoomInOut_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_OnZoomInOut_ZoomOut;
        public InputActionMap Get() { return m_Wrapper.m_OnZoomInOut; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnZoomInOutActions set) { return set.Get(); }
        public void AddCallbacks(IOnZoomInOutActions instance)
        {
            if (instance == null || m_Wrapper.m_OnZoomInOutActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnZoomInOutActionsCallbackInterfaces.Add(instance);
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
            @ZoomOut.started += instance.OnZoomOut;
            @ZoomOut.performed += instance.OnZoomOut;
            @ZoomOut.canceled += instance.OnZoomOut;
        }

        private void UnregisterCallbacks(IOnZoomInOutActions instance)
        {
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
            @ZoomOut.started -= instance.OnZoomOut;
            @ZoomOut.performed -= instance.OnZoomOut;
            @ZoomOut.canceled -= instance.OnZoomOut;
        }

        public void RemoveCallbacks(IOnZoomInOutActions instance)
        {
            if (m_Wrapper.m_OnZoomInOutActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnZoomInOutActions instance)
        {
            foreach (var item in m_Wrapper.m_OnZoomInOutActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnZoomInOutActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnZoomInOutActions @OnZoomInOut => new OnZoomInOutActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_touchSchemeIndex = -1;
    public InputControlScheme touchScheme
    {
        get
        {
            if (m_touchSchemeIndex == -1) m_touchSchemeIndex = asset.FindControlSchemeIndex("touch");
            return asset.controlSchemes[m_touchSchemeIndex];
        }
    }
    public interface IOnMoveActions
    {
        void OnWASD(InputAction.CallbackContext context);
    }
    public interface IOnSprintActions
    {
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IOnDebugActions
    {
        void OnF3(InputAction.CallbackContext context);
    }
    public interface IOnInteractionActions
    {
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface IOnAttackActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IOnInventoryActions
    {
        void OnOpenInventory(InputAction.CallbackContext context);
    }
    public interface IOnUseItemActions
    {
        void OnItem1(InputAction.CallbackContext context);
        void OnItem2(InputAction.CallbackContext context);
        void OnItem3(InputAction.CallbackContext context);
        void OnItem4(InputAction.CallbackContext context);
        void OnItem5(InputAction.CallbackContext context);
        void OnItem6(InputAction.CallbackContext context);
        void OnItem7(InputAction.CallbackContext context);
        void OnItem8(InputAction.CallbackContext context);
        void OnItem9(InputAction.CallbackContext context);
        void OnItem10(InputAction.CallbackContext context);
    }
    public interface IOnViewAroundActions
    {
        void OnViewaround(InputAction.CallbackContext context);
    }
    public interface IOnZoomInOutActions
    {
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
    }
}
